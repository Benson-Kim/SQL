Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

Sample Code:
    SELECT COUNT(*)
    FROM user
	
i. Attribute table =        10000 
ii. Business table =        10000 
iii. Category table =       10000 
iv. Checkin table =         10000
v. elite_years table =      10000 
vi. friend table =          10000 
vii. hours table =          10000 
viii. photo table =         10000 
ix. review table =          10000 
x. tip table =              10000 
xi. user table =            10000 
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

Sample Code:
    SELECT COUNT(DISTINCT (id))
        ,COUNT(DISTINCT (business_id))
        ,COUNT(DISTINCT (user_id))
    FROM Checkin

i. Business =       10000   (id)
ii. Hours =         1562    (business_id)
iii. Category =     2643    (business_id)
iv. Attribute =     1115    (business_id)
v. Review =         10000   (id)            8090    (business_id)       9581    (user_id)
vi. Checkin =       493     (business_id)
vii. Photo =        10000   (id)            6493    (business_id)
viii. Tip =         537     (user_id)       3979    (business_id) 
ix. User =          10000   (id)
x. Friend =         11      (user_id)
xi. Elite_years =   2780    (user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
        No
	
	SQL code used to arrive at answer:
        SELECT *
        FROM user
        WHERE id IS NULL
            OR name IS NULL
            OR review_count IS NULL
            OR yelping_since IS NULL
            OR useful IS NULL
            OR funny IS NULL
            OR cool IS NULL
            OR fans IS NULL
            OR average_stars IS NULL
            OR compliment_hot IS NULL
            OR compliment_more IS NULL
            OR compliment_profile IS NULL
            OR compliment_cute IS NULL
            OR compliment_list IS NULL
            OR compliment_note IS NULL
            OR compliment_plain IS NULL
            OR compliment_cool IS NULL
            OR compliment_funny IS NULL
            OR compliment_writer IS NULL
            OR compliment_photos IS NULL

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 52		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
        SELECT City
            ,count(review_count) AS Reviews
        FROM BUSINESS
        GROUP BY City
        ORDER BY Reviews DESC

	Copy and Paste the Result Below:

        +-----------------+---------+
        | city            | Reviews |
        +-----------------+---------+
        | Las Vegas       |    1561 |
        | Phoenix         |    1001 |
        | Toronto         |     985 |
        | Scottsdale      |     497 |
        | Charlotte       |     468 |
        | Pittsburgh      |     353 |
        | Montréal        |     337 |
        | Mesa            |     304 |
        | Henderson       |     274 |
        | Tempe           |     261 |
        | Edinburgh       |     239 |
        | Chandler        |     232 |
        | Cleveland       |     189 |
        | Gilbert         |     188 |
        | Glendale        |     188 |
        | Madison         |     176 |
        | Mississauga     |     150 |
        | Stuttgart       |     141 |
        | Peoria          |     105 |
        | Markham         |      80 |
        | Champaign       |      71 |
        | North Las Vegas |      70 |
        | North York      |      64 |
        | Surprise        |      60 |
        | Richmond Hill   |      54 |
        +-----------------+---------+
        (Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

    SELECT stars
        ,COUNT(stars) AS Count
    FROM BUSINESS
    WHERE City = 'Avon'
    GROUP BY stars
    ORDER BY Stars ASC

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

    +-------+-------+
    | stars | Count |
    +-------+-------+
    |   1.5 |     1 |
    |   2.5 |     2 |
    |   3.5 |     3 |
    |   4.0 |     2 |
    |   4.5 |     1 |
    |   5.0 |     1 |
    +-------+-------+

ii. Beachwood

SQL code used to arrive at answer:
    SELECT stars
        ,COUNT(stars) AS Count
    FROM BUSINESS
    WHERE City = 'Beachwood'
    GROUP BY stars
    ORDER BY Stars ASC

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
    +-------+-------+
    | stars | Count |
    +-------+-------+
    |   2.0 |     1 |
    |   2.5 |     1 |
    |   3.0 |     2 |
    |   3.5 |     2 |
    |   4.0 |     1 |
    |   4.5 |     2 |
    |   5.0 |     5 |
    +-------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
		SELECT name
            ,review_count
        FROM USER
        ORDER BY review_count DESC LIMIT 3

	Copy and Paste the Result Below:
        +--------+--------------+
        | name   | review_count |
        +--------+--------------+
        | Gerald |         2000 |
        | Sara   |         1629 |
        | Yuri   |         1339 |
        +--------+--------------+
		


8. Does posing more reviews correlate with more fans?
        No

	Please explain your findings and interpretation of the results:

    Running the query below and observing the results indicates that there is no correlation between the number of reviews posted and number of fans

        Query:
            SELECT name
                ,review_count
                ,fans
            FROM USER Fans
            ORDER BY review_count DESC LIMIT 10

        Results:
            +-----------+--------------+------+
            | name      | review_count | fans |
            +-----------+--------------+------+
            | Gerald    |         2000 |  253 |
            | Sara      |         1629 |   50 |
            | Yuri      |         1339 |   76 |
            | .Hon      |         1246 |  101 |
            | William   |         1215 |  126 |
            | Harald    |         1153 |  311 |
            | eric      |         1116 |   16 |
            | Roanna    |         1039 |  104 |
            | Mimi      |          968 |  497 |
            | Christine |          930 |  173 |
            +-----------+--------------+------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
        "Love"

        +------+------+
        | love | hate |
        +------+------+
        | 1780 |  232 |
        +------+------+
	
	SQL code used to arrive at answer:

        SELECT COUNT(CASE 
			WHEN TEXT LIKE '%love%'
				THEN 'love'
			END) AS love
	    ,COUNT(CASE 
			WHEN TEXT LIKE '%hate%'
				THEN 'hate'
			END) AS hate
        FROM review

    
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
        SELECT name
                ,FANS
        FROM USER
        ORDER BY FANS DESC LIMIT 10
	
	Copy and Paste the Result Below:
        +-----------+------+
        | name      | fans |
        +-----------+------+
        | Amy       |  503 |
        | Mimi      |  497 |
        | Harald    |  311 |
        | Gerald    |  253 |
        | Christine |  173 |
        | Lisa      |  159 |
        | Cat       |  133 |
        | William   |  126 |
        | Fran      |  124 |
        | Lissa     |  120 |
        +-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

    I chose city as 'Toronto' and Category as 'Restaurants'. The query returned six distint businesses. Three of the six results
    returned have 2-3 stars while the other 3 have 4-5 stars ratings. 

i. Do the two groups you chose to analyze have a different distribution of hours?

    Restaurants with star rating of 4-5 are open from the midday (11am through 4am) hours to past midnight 23pm through 2am) while those restaurants with star ratings of 2-3 
    are open from 8:30am to sometime to midnight, mostly 23pm

ii. Do the two groups you chose to analyze have a different number of reviews?

    There is no clear correlation between the two groups. there is a 3.0-rated restaurant with 47 reviews and a 4.5-rated restaurant with only 8 reviews.
                
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

    Not really. Since all the businesses are located in 'Toronto' then it can not be easy to determine the exact geolocation of the restaurants. Placing the 
    GPS locations on a map would help us get deeper insights

SQL code used for analysis:

    SELECT Bus.name
        ,Bus.address
        ,Bus.city
        ,Bus.STATE
        ,Bus.latitude
        ,Bus.longitude
        ,Bus.stars
        ,Bus.review_count
        ,Hrs.hours
        ,Cat.category
    FROM Business Bus
    INNER JOIN Category Cat ON Bus.id = Cat.business_id
    INNER JOIN Hours Hrs ON Bus.id = Hrs.business_id
    WHERE Bus.City = 'Toronto'
        AND Cat.Category = 'Restaurants'
    ORDER BY Stars DESC
        ,review_count DESC

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
      Open businesses have higher average star rating (3.679) compared to closed businesses (3.520)  
         
ii. Difference 2:
     Open businesses have more reviews (31.757) than closed businesses (23.198)   
         
         
SQL code used for analysis:
    SELECT COUNT(DISTINCT (id)) AS Count
        ,AVG(review_count) AS 'Average Review'
        ,AVG(stars) AS 'Average Rating'
        ,is_open
    FROM business
    GROUP BY is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, 
predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, 
so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
        Identify the relationship between user 'elite_years' and number of 'fans' they have and size of 'review_count'
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
        I will need to extract user details such as id, name, the number of fans, the number of reviews and the count of user elite_years
                  
iii. Output of your finished dataset:
            +------------------------+---------+------+--------------+---------------+
            | id                     | name    | fans | review_count | count(E.year) |
            +------------------------+---------+------+--------------+---------------+
            | -lh59ko3dxChBSZ9U7LfUw | Lissa   |  120 |          834 |             9 |
            | -fUARDNuXAfrOn4WLSZLgA | Ed      |   38 |          904 |             8 |
            | -a0LRFr94D9ohyBJCKVvXQ | Elaine  |   18 |          332 |             7 |
            | -kO6984fXByyZm3_6z2JYg | Dominic |   37 |          836 |             7 |
            | --Qh8yKWAvIP4V4K8ZPfHA | Dixie   |   41 |          503 |             6 |
            | -aAgfEUH4UoFDRXZCfJSUA | Matt    |   14 |          476 |             6 |
            | -d2daWmftYumOaYpbD5D8Q | Jia     |    8 |          228 |             6 |
            | -HLE-x7Lpkfprd6er-JFGg | Danial  |    5 |          136 |             5 |
            | -5e4VTnu_pR4Gpv3VSncaw | Justin  |   13 |          177 |             4 |
            | -C-l8EHSLXtZZVfUAUhsPA | Nieves  |   80 |          178 |             4 |
            | -dbWm5L_Ol2hZeLRoQOK7w | Mel     |    9 |          156 |             4 |
            | -0HhZbPBlB1YZx3BhAfaEA | Tasha   |    8 |          250 |             3 |
            | -50XWnmQGqBgEI-9ANvLlg | Lalena  |   25 |          224 |             3 |
            | -EWQZjRHAKMddHW_dZTvdw | Chris   |    2 |           70 |             3 |
            | -9SoHrhiiUVmx6-MkyR4RA | Brad    |    1 |          182 |             2 |
            | -ga7pQvnJcMB1_pIapHQRQ | Tracy   |    5 |           71 |             2 |
            | -hYYjAXSAa657rY0ANtTGQ | Kristen |   15 |          428 |             2 |
            | --BumyUHiO_7YsHurb9Hkw | Sapna   |    1 |           38 |             1 |
            | -9RU4LuI_TfYgv9rBijJoQ | Keith   |    3 |           61 |             1 |
            | -GD0XVUKRj96vf6TP68Evw | Maung   |    0 |           54 |             1 |
            | -cvrhCPCKHUkEsDak_fY4g | Jamie   |    4 |           95 |             1 |
            +------------------------+---------+------+--------------+---------------+
         
iv. Provide the SQL code you used to create your final dataset:

        SELECT id
            ,name
            ,fans
            ,review_count
            ,count(E.year)
        FROM User U
        INNER JOIN elite_years E ON U.id = E.user_id
        GROUP BY E.user_id
        ORDER BY count(E.year) DESC
